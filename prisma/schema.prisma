// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // 추가
}

enum Gender {
  male
  female
  other
}

enum MissionStatus {
  ongoing
  completed
  reviewed
}

enum NotificationType {
  new_mission
  review_request
  mission_completed
  review_approved
}

model User {
  id             Int              @id @default(autoincrement()) @map("user_id")
  username       String           @unique @db.VarChar(50)
  email          String           @unique @db.VarChar(100)
  name           String           @db.VarChar(100)
  gender         Gender
  birth          DateTime         @db.Date
  address        String?          @default("") @db.VarChar(255)
  detailAddress  String?          @default("") @map("detail_address") @db.VarChar(255)
  phoneNumber    String           @map("phone_number") @db.VarChar(20)
  createdAt      DateTime         @default(now()) @map("created_at")
  points         Int             @default(0)
  preferences    UserPreference[]
  missions       UserMission[]
  reviews        Review[]
  notifications  Notification[]

  @@map("users")
}

model FoodCategory {
  id           Int              @id @default(autoincrement()) @map("category_id")
  name         String           @db.VarChar(50)
  preferences  UserPreference[]

  @@map("food_categories")
}

model UserPreference {
  id             Int          @id @default(autoincrement()) @map("preference_id")
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("food_category_id")

  @@map("user_preferences")
}

model Region {
  id          Int      @id @default(autoincrement()) @map("region_id")
  regionName  String   @map("region_name") @db.VarChar(50)
  stores      Store[]

  @@map("regions")
}

model Store {
  id        Int       @id @default(autoincrement()) @map("store_id")
  region    Region    @relation(fields: [regionId], references: [id])
  regionId  Int       @map("region_id")
  storeName String    @map("store_name") @db.VarChar(100)
  address   String    @db.VarChar(255)
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  missions  Mission[]
  reviews   Review[]

  @@index([regionId])
  @@map("stores")
}

model Mission {
  id                Int           @id @default(autoincrement()) @map("mission_id")
  store            Store         @relation(fields: [storeId], references: [id])
  storeId          Int           @map("store_id")
  description      String        @map("mission_description") @db.Text
  points           Int
  startDate        DateTime      @default(now()) @map("start_date")
  endDate          DateTime?     @map("end_date")
  isActive         Boolean       @default(true) @map("is_active")
  createdAt        DateTime      @default(now()) @map("created_at")
  userMissions     UserMission[]
  reviews          Review[]

  @@index([storeId])
  @@map("missions")
}

model UserMission {
  id           Int           @id @default(autoincrement()) @map("user_mission_id")
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @map("user_id")
  mission      Mission       @relation(fields: [missionId], references: [id])
  missionId    Int          @map("mission_id")
  status       MissionStatus @default(ongoing)
  startedAt    DateTime     @default(now()) @map("started_at")
  completedAt  DateTime?    @map("completed_at")

  @@unique([userId, missionId], name: "unique_user_mission")
  @@index([userId, status])
  @@map("user_missions")
}

model Review {
  id          Int       @id @default(autoincrement()) @map("review_id")
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @map("user_id")
  mission     Mission   @relation(fields: [missionId], references: [id])
  missionId   Int       @map("mission_id")
  store       Store     @relation(fields: [storeId], references: [id])
  storeId     Int       @map("store_id")
  rating      Int
  reviewText  String?   @map("review_text") @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isVerified  Boolean   @default(false) @map("is_verified")

  @@unique([userId, storeId], name: "unique_user_store_review")
  @@index([storeId])
  @@map("reviews")
}

model Notification {
  id               Int              @id @default(autoincrement()) @map("notification_id")
  user             User             @relation(fields: [userId], references: [id])
  userId           Int              @map("user_id")
  notificationType NotificationType @map("notification_type")
  content          String           @db.Text
  createdAt        DateTime         @default(now()) @map("created_at")
  isRead           Boolean          @default(false) @map("is_read")

  @@index([userId, isRead])
  @@map("notifications")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(512)
  expiresAt DateTime @map("expires_at")

  @@map("session")
}